const express = require("express");
const router = express.Router();
const axios = require("axios");
const CartModel = require("../models/CartModel");
const OrderModel = require("../models/OrderModel");

// Route th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
router.post("/add-to-cart", async (req, res) => {
    try {
        const { productId } = req.body;
        const quantity = parseInt(req.body.quantity, 10) || 1;
        console.log("üõí Add to cart:", { productId, quantity, raw: req.body.quantity, type: typeof req.body.quantity });

        const token = req.session.token;

        const response = await axios.post(
            "http://localhost:5000/api/order/add-to-cart",
            { productId, quantity },
            {
                headers: {
                    Authorization: `Bearer ${token}`
                }
            }
        );

        res.redirect("/order/cart"); // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn gi·ªè h√†ng sau khi th√™m
    } catch (err) {
        console.error("‚ùå L·ªói th√™m v√†o gi·ªè h√†ng:", err.message);
        res.redirect("/productdetails/" + req.body.productId);
    }
});


router.get("/cart", async (req, res) => {
    const token = req.session.token;

    if (!token) {
        return res.redirect("/login"); // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p th√¨ chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p
    }

    try {
        const response = await axios.get("http://localhost:5000/api/order/cart", {
            headers: {
                Authorization: `Bearer ${token}`
            }
        });

        const cartItems = response.data.cart.map(item => new CartModel(item));
        res.render("GioHang/cart", {
            cartItems,
            user: req.session.user,
            token: req.session.token
        });

    } catch (err) {
        console.error("‚ùå L·ªói l·∫•y gi·ªè h√†ng:", err.message);
        res.render("GioHang/cart", { cartItems: [], error: "Kh√¥ng th·ªÉ hi·ªÉn th·ªã gi·ªè h√†ng.", user: req.session.user });
    }
});

router.post("/buy-now", async (req, res) => {
    const { productId } = req.body;
    const quantity = parseInt(req.body.quantity, 10) || 1;
    const token = req.session.token;

    if (!token) return res.redirect("/login");

    try {
        await axios.post(
            "http://localhost:5000/api/order/add-to-cart",
            { productId, quantity },
            { headers: { Authorization: `Bearer ${token}` } }
        );
        const response = await axios.post(
            "http://localhost:5000/api/order/checkout",
            {},
            { headers: { Authorization: `Bearer ${token}` } }
        );
        const order = new OrderModel(response.data.order);
        res.render("GioHang/checkoutResult", {
            success: true,
            order,
            user: req.session.user
        });
    } catch (err) {
        console.error("‚ùå L·ªói mua ngay:", err.message);
        res.render("GioHang/checkoutResult", {
            success: false,
            errorMessage: "Kh√¥ng th·ªÉ mua ngay l√∫c n√†y.",
            user: req.session.user
        });
    }
});

router.delete("/remove-from-cart", async (req, res) => {
    const token = req.session.token;
    const productId = req.query.productId;

    if (!token) return res.status(401).json({ message: "Ch∆∞a ƒëƒÉng nh·∫≠p" });

    try {
        await axios.delete(`http://localhost:5000/api/order/remove-from-cart?productId=${productId}`, {
            headers: {
                Authorization: `Bearer ${token}`
            }
        });
        res.status(200).json({ message: "‚úÖ ƒê√£ x√≥a kh·ªèi gi·ªè h√†ng" });
    } catch (err) {
        console.error("‚ùå L·ªói xo√° s·∫£n ph·∫©m:", err.message);
        res.status(500).json({ message: "L·ªói xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng" });
    }
});

// Route thanh to√°n
router.post("/checkout", async (req, res) => {
    try {
        const token = req.session.token;

        const response = await axios.post(
            "http://localhost:5000/api/order/checkout",
            {},
            {
                headers: {
                    Authorization: `Bearer ${token}`
                }
            }
        );

        const order = new OrderModel(response.data.order);
        res.render("GioHang/checkoutResult", {
            success: true,
            order,
            user: req.session.user
        });
    } catch (err) {
        console.error("‚ùå L·ªói thanh to√°n:", err.message);
        res.render("GioHang/checkoutResult", {
            success: false,
            errorMessage: "Kh√¥ng th·ªÉ th·ª±c hi·ªán thanh to√°n.",
            user: req.session.user
        });
    }
});

// Route xem l·ªãch s·ª≠ ƒë∆°n h√†ng
router.get("/history", async (req, res) => {
    const token = req.session.token;

    if (!token) {
        return res.redirect("/login"); // ‚úÖ Ch·∫∑n n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
    }

    try {
        const response = await axios.get("http://localhost:5000/api/order/history", {
            headers: {
                Authorization: `Bearer ${token}`
            }
        });

        const orders = response.data.orders.map(order => new OrderModel(order));
        res.render("GioHang/history", { orders, user: req.session.user });
    } catch (err) {
        console.error("‚ùå L·ªói xem l·ªãch s·ª≠ ƒë∆°n h√†ng:", err.message);
        res.render("GioHang/history", { orders: [], error: "Kh√¥ng th·ªÉ hi·ªÉn th·ªã l·ªãch s·ª≠ ƒë∆°n h√†ng.", user: req.session.user });
    }
});

module.exports = router;

// N√∫t th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
// http://localhost:5000/api/order/add-to-cart
// xem danh s√°ch gi·ªè h√†ng
// http://localhost:5000/api/order/cart
// X√≥a 1 s·∫£n ph·∫©m trong gi·ªè h√†ng
// http://localhost:5000/api/order/remove-from-cart?productId=67f2ef395a6ab1e81ef6001c
// N√∫t b·∫•m Thanh To√°n
// http://localhost:5000/api/order/checkout
// xem l·ªãch s·ª≠ ƒë∆°n h√†ng ƒë√£ thanh to√°nto√°n